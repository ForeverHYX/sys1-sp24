$version Generated by VerilatedVcd $end
$timescale 10ps $end
 $scope module TOP $end
  $scope module Testbench $end
   $var wire 8 # I [7:0] $end
   $var wire 3 $ S [2:0] $end
   $var wire 1 2 O $end
   $scope module dut $end
    $var wire 8 # I [7:0] $end
    $var wire 3 $ S [2:0] $end
    $var wire 1 2 O $end
    $var wire 2 3 temp [1:0] $end
    $scope module mux4_1 $end
     $var wire 1 % I0 $end
     $var wire 1 & I1 $end
     $var wire 1 ' I2 $end
     $var wire 1 ( I3 $end
     $var wire 2 ) S [1:0] $end
     $var wire 1 4 O $end
     $var wire 2 ) s_logisimBus15 [1:0] $end
     $var wire 1 5 s_logisimNet0 $end
     $var wire 1 > s_logisimNet1 $end
     $var wire 1 * s_logisimNet10 $end
     $var wire 1 % s_logisimNet11 $end
     $var wire 1 6 s_logisimNet12 $end
     $var wire 1 & s_logisimNet13 $end
     $var wire 1 ? s_logisimNet14 $end
     $var wire 1 @ s_logisimNet16 $end
     $var wire 1 4 s_logisimNet17 $end
     $var wire 1 7 s_logisimNet2 $end
     $var wire 1 B s_logisimNet3 $end
     $var wire 1 ( s_logisimNet4 $end
     $var wire 1 A s_logisimNet5 $end
     $var wire 1 ' s_logisimNet6 $end
     $var wire 1 + s_logisimNet7 $end
     $var wire 1 C s_logisimNet8 $end
     $var wire 1 8 s_logisimNet9 $end
     $scope module GATES_1 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 + input1 $end
      $var wire 1 * input2 $end
      $var wire 1 ? result $end
      $var wire 1 + s_realInput1 $end
      $var wire 1 * s_realInput2 $end
     $upscope $end
     $scope module GATES_2 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 , input1 $end
      $var wire 1 * input2 $end
      $var wire 1 A result $end
      $var wire 1 , s_realInput1 $end
      $var wire 1 * s_realInput2 $end
     $upscope $end
     $scope module GATES_3 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 + input1 $end
      $var wire 1 - input2 $end
      $var wire 1 > result $end
      $var wire 1 + s_realInput1 $end
      $var wire 1 - s_realInput2 $end
     $upscope $end
     $scope module GATES_4 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 , input1 $end
      $var wire 1 - input2 $end
      $var wire 1 @ result $end
      $var wire 1 , s_realInput1 $end
      $var wire 1 - s_realInput2 $end
     $upscope $end
     $scope module GATES_5 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 ? input1 $end
      $var wire 1 % input2 $end
      $var wire 1 6 result $end
      $var wire 1 ? s_realInput1 $end
      $var wire 1 % s_realInput2 $end
     $upscope $end
     $scope module GATES_6 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 A input1 $end
      $var wire 1 & input2 $end
      $var wire 1 5 result $end
      $var wire 1 A s_realInput1 $end
      $var wire 1 & s_realInput2 $end
     $upscope $end
     $scope module GATES_7 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 ' input1 $end
      $var wire 1 > input2 $end
      $var wire 1 8 result $end
      $var wire 1 ' s_realInput1 $end
      $var wire 1 > s_realInput2 $end
     $upscope $end
     $scope module GATES_8 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 @ input1 $end
      $var wire 1 ( input2 $end
      $var wire 1 7 result $end
      $var wire 1 @ s_realInput1 $end
      $var wire 1 ( s_realInput2 $end
     $upscope $end
     $scope module GATES_9 $end
      $var wire 4 E BubblesMask [3:0] $end
      $var wire 1 6 input1 $end
      $var wire 1 5 input2 $end
      $var wire 1 8 input3 $end
      $var wire 1 7 input4 $end
      $var wire 1 4 result $end
      $var wire 1 6 s_realInput1 $end
      $var wire 1 5 s_realInput2 $end
      $var wire 1 8 s_realInput3 $end
      $var wire 1 7 s_realInput4 $end
     $upscope $end
    $upscope $end
    $scope module mux4_2 $end
     $var wire 1 . I0 $end
     $var wire 1 / I1 $end
     $var wire 1 0 I2 $end
     $var wire 1 1 I3 $end
     $var wire 2 ) S [1:0] $end
     $var wire 1 9 O $end
     $var wire 2 ) s_logisimBus15 [1:0] $end
     $var wire 1 : s_logisimNet0 $end
     $var wire 1 > s_logisimNet1 $end
     $var wire 1 * s_logisimNet10 $end
     $var wire 1 . s_logisimNet11 $end
     $var wire 1 ; s_logisimNet12 $end
     $var wire 1 / s_logisimNet13 $end
     $var wire 1 ? s_logisimNet14 $end
     $var wire 1 @ s_logisimNet16 $end
     $var wire 1 9 s_logisimNet17 $end
     $var wire 1 < s_logisimNet2 $end
     $var wire 1 F s_logisimNet3 $end
     $var wire 1 1 s_logisimNet4 $end
     $var wire 1 A s_logisimNet5 $end
     $var wire 1 0 s_logisimNet6 $end
     $var wire 1 + s_logisimNet7 $end
     $var wire 1 G s_logisimNet8 $end
     $var wire 1 = s_logisimNet9 $end
     $scope module GATES_1 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 + input1 $end
      $var wire 1 * input2 $end
      $var wire 1 ? result $end
      $var wire 1 + s_realInput1 $end
      $var wire 1 * s_realInput2 $end
     $upscope $end
     $scope module GATES_2 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 , input1 $end
      $var wire 1 * input2 $end
      $var wire 1 A result $end
      $var wire 1 , s_realInput1 $end
      $var wire 1 * s_realInput2 $end
     $upscope $end
     $scope module GATES_3 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 + input1 $end
      $var wire 1 - input2 $end
      $var wire 1 > result $end
      $var wire 1 + s_realInput1 $end
      $var wire 1 - s_realInput2 $end
     $upscope $end
     $scope module GATES_4 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 , input1 $end
      $var wire 1 - input2 $end
      $var wire 1 @ result $end
      $var wire 1 , s_realInput1 $end
      $var wire 1 - s_realInput2 $end
     $upscope $end
     $scope module GATES_5 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 ? input1 $end
      $var wire 1 . input2 $end
      $var wire 1 ; result $end
      $var wire 1 ? s_realInput1 $end
      $var wire 1 . s_realInput2 $end
     $upscope $end
     $scope module GATES_6 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 A input1 $end
      $var wire 1 / input2 $end
      $var wire 1 : result $end
      $var wire 1 A s_realInput1 $end
      $var wire 1 / s_realInput2 $end
     $upscope $end
     $scope module GATES_7 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 0 input1 $end
      $var wire 1 > input2 $end
      $var wire 1 = result $end
      $var wire 1 0 s_realInput1 $end
      $var wire 1 > s_realInput2 $end
     $upscope $end
     $scope module GATES_8 $end
      $var wire 2 D BubblesMask [1:0] $end
      $var wire 1 @ input1 $end
      $var wire 1 1 input2 $end
      $var wire 1 < result $end
      $var wire 1 @ s_realInput1 $end
      $var wire 1 1 s_realInput2 $end
     $upscope $end
     $scope module GATES_9 $end
      $var wire 4 E BubblesMask [3:0] $end
      $var wire 1 ; input1 $end
      $var wire 1 : input2 $end
      $var wire 1 = input3 $end
      $var wire 1 < input4 $end
      $var wire 1 9 result $end
      $var wire 1 ; s_realInput1 $end
      $var wire 1 : s_realInput2 $end
      $var wire 1 = s_realInput3 $end
      $var wire 1 < s_realInput4 $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b10000000 #
b111 $
0%
0&
0'
1(
b11 )
0*
0+
1,
1-
0.
0/
00
01
12
b10 3
14
05
06
17
08
09
0:
0;
0<
0=
0>
0?
1@
0A
0B
0C
b00 D
b0000 E
0F
0G
#500
b11000000 #
b110 $
1'
b10 )
1+
0,
07
18
1>
0@
#1000
b11100000 #
b101 $
1&
b01 )
1*
0+
1,
0-
15
08
0>
1A
#1500
b10010000 #
b100 $
1%
0&
0'
b00 )
1+
0,
05
16
1?
0A
#2000
b10001000 #
b011 $
0%
b11 )
0*
0+
1,
1-
11
b11 3
06
17
19
1<
0?
1@
#2500
b10000100 #
b010 $
b10 )
1+
0,
10
01
b01 3
04
07
0<
1=
1>
0@
#3000
b10000010 #
b001 $
b01 )
1*
0+
1,
0-
1/
00
1:
0=
0>
1A
#3500
b10000001 #
b000 $
b00 )
1+
0,
1.
0/
0:
1;
1?
0A
#4000
